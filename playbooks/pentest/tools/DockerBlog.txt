---
layout: post 
title: "Docker security concepts"
date 2020-02-12 00:00:00 +0000
categories: posts
permalink /docker/
---


Identifying if you're in a container

There's a few pretty straightforward ways to identify this.


## Presense of .dockerenv or .dockerinit files
The first and most obvious method is checking for the presense of these two files.

The .dockerenv file is a default file present in the root directory of Docker containers, which was historically used to defined environment variables within the container.

The .dockerinit file is similar, again located at the root directory of a container. Unlike the .dockerenv file, this has since been removed in newer versions of Docker. Containers built after v1.1 will no longer have this file.

Both of these files can be removed without issue.


### Checking the init process 

On Linux systems, the process with process ID (PID) 1 is usually a special process known as the init process. 

This process is kicked off by the kernel during the boot process, and usually is


Generally when enumerating a Linux system we'd expect to see one of these common init processes as PID 1.

Docker assigns PID 1 to the CMD entrypoint defined in the Dockerfile. If the process running as PID 1 is something pretty unusual, such as a script or an application rather than a more common init process, it's likely that we're in a container.



### Checking the process list.


Docker uses the Linux kernel namespace feature to hide processes that a container can see. 

This means that by default a Docker container won't see the processes running on the host. For this reason you are more likely to see a smaller list of processes in a container.

Docker containers also tend to lack hardware related processes, so if you see a lack of these 



### Checking the security attributes of PID 1

```
cat /proc/1/attr/current
```

By checking the security attributes of the init process, we can see whether the default Docker AppArmour profile is in use.

On my host I can see that AppArmour tells us that we're unconfined.


However within the container we can see a mention of the default Docker AppArmour profile.





# Checking control groups (cgroups) of PID 1

Control groups (commonly referred to as cgroups) are a Linux kernel feature which allow the limiting of hardware resources (i.e. CPU/memory/IO) of processes.

The Docker engine uses cgroups for two primary purposes; sharing these hardware resources among containers and to enforce limits (https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory)

The names of these cgroups are Docker-specific, and therefore are pretty identifiable.

We can check the control groups of the init process by running
```
cat /proc/1/cgroup
```


Both of these files can be removed without any issues.





## Escaping the container
If we've identified that we are in a container (and it's a Docker container) there are multiple possible escapes.

Most of these depend on how well configured the container is. 

## Docker socket


# Everything and on fire and I want it to be secure.

Luckily everything isn't so bad. While Docker has experienced some of the teething issues that many new technologies see in their formative years, things are a lot more positive these days.


